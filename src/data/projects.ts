export type ProjectVisibility = "public" | "private";
export type ProjectType = "personal" | "client";

export interface Project {
  title: string;
  description: string;
  highlights?: string[];
  stack: string[];
  githubUrl?: string;
  liveUrl?: string;
  caseStudyUrl?: string;
  imageUrl?: string;
  logoUrl?: string;
  visibility: ProjectVisibility;
  openSource?: boolean;
  license?: string;
  year?: string;
  type: ProjectType;
  clientName?: string;
  clientLogoUrl?: string;
  role?: string;
  status?: "active" | "archived" | "in progress" | "maintenance";
}

export const projects: Project[] = [
  {
    title: "EV Fleet Management Platform Suite",
    description:
      "A comprehensive suite of tools for an EV SaaS provider, including fleet assessment, mobile employee assistant, and infrastructure orchestration. Delivered scalable microservices, real-time integrations, and IoT-ready backend for enterprise clients transitioning to e-mobility.",
    highlights: [
      "Fleet Assessment: Usage analysis, cost projections, charging strategy recommendations.",
      "Mobile Assistant: Cross-platform app for employees to locate charging stations and manage EVs.",
      "Infrastructure Orchestration: Real-time monitoring and automated workflows for 1000+ charging stations.",
      "Built scalable microservices architecture with gRPC communication across services.",
      "Enabled cost & CO₂ savings projections using custom models.",
      "Delivered employee-first mobile UX for EV fleet users.",
      "Enabled session tracking and charge cost summaries.",
      "Connected real-time backend via microservices + gRPC.",
      "Designed IoT-ready backend architecture.",
      "Automated installation workflows across stakeholders.",
      "Integrated service monitoring for 1000+ stations.",
      "Integrated CI/CD and cloud deployment (Azure, GitLab).",
    ],
    stack: [
      "NestJS",
      "TypeScript",
      "PostgreSQL",
      "Redis",
      "RabbitMQ",
      "Docker",
      "Kubernetes",
      "Azure",
      "GitLab",
      "React",
      "Java",
    ],
    githubUrl: undefined,
    liveUrl: undefined,
    visibility: "private",
    type: "client",
    openSource: false,
    year: "2021–2025",
    role: "Senior Backend Engineer",
    status: "active",
    clientName: "Confidential (EV SaaS Provider)",
  },
  {
    title: "Personal Portfolio Website",
    description:
      "A cyberpunk-inspired personal website and portfolio showcasing my work as a Senior Backend Engineer & Cloud Architect. Built with Next.js 14, TypeScript, and Tailwind CSS, featuring an interactive terminal, real-time GitHub activity tracking, and blog integration.",
    highlights: [
      "Interactive Terminal: Custom-built terminal interface with command history and real-time execution",
      "GitHub Integration: Real-time repository display, contribution graph visualization, and activity feed",
      "Blog Integration: Medium blog integration with responsive article cards and image optimization",
      "Cyberpunk Design: Modern UI/UX with cyberpunk-inspired design elements",
      "Portfolio Showcase: Detailed project descriptions with technology stack highlights",
      "Professional Timeline: Experience timeline with work history and achievements",
      "SEO Optimized: Meta tags, sitemap generation, and search engine optimization",
      "Responsive Layout: Fully responsive design for all devices and screen sizes",
      "Dark Mode: Optimized dark mode experience with smooth transitions",
      "Performance: Fast page loads with Next.js 14 and optimized assets",
      "TypeScript: Full type safety throughout the application",
      "Deployment: Automated deployment with Vercel and CI/CD integration",
    ],
    stack: ["Next.js", "TypeScript", "Tailwind CSS", "Framer Motion", "React", "Node.js"],
    githubUrl: "https://github.com/MRdevX/mrashidi.me",
    liveUrl: "https://mrashidi.me",
    visibility: "public",
    type: "personal",
    openSource: true,
    license: "All Rights Reserved",
    year: "2024",
    role: "Creator & Maintainer",
    status: "active",
  },
  {
    title: "NestJS Queue Worker PoC",
    description:
      "A proof-of-concept demonstrating a scalable, fault-tolerant task processing system built with NestJS, PostgreSQL, and RabbitMQ. Showcases workflow orchestration, retry mechanisms, and horizontal scaling for distributed task processing.",
    highlights: [
      "Queue Manager: Handles task queuing, assignment, and monitoring",
      "Worker Nodes: Execute various task types with fault tolerance and optimized patterns",
      "Coordinator: Orchestrates workflows and manages task dependencies",
      "Database: PostgreSQL for persistent task state and workflow definitions",
      "Message Broker: RabbitMQ for reliable asynchronous task distribution",
      "Pattern Optimization: Uses EventPattern for all tasks with fire-and-forget semantics",
      "Horizontal Scaling: Supports multiple worker instances for load distribution",
      "Retry Mechanisms: Built-in fault tolerance with configurable retry policies",
      "Workflow Orchestration: Complex task dependencies and compensation patterns",
      "Docker Support: Containerized deployment with multi-stage builds",
      "Health Monitoring: Comprehensive health checks and status endpoints",
      "API Documentation: Complete REST API for task and queue management",
    ],
    stack: ["NestJS", "TypeScript", "PostgreSQL", "RabbitMQ", "Docker", "Node.js"],
    githubUrl: "https://github.com/MRdevX/nestjs-queue-worker-poc",
    liveUrl: undefined,
    visibility: "public",
    type: "personal",
    openSource: true,
    license: undefined,
    year: "2025",
    role: "Creator & Maintainer",
    status: "active",
  },
  {
    title: "Notable Nomads Backend API",
    description:
      "Backend API service for the Notable Nomads platform featuring AI chat integration, email services, blog management, and comprehensive health monitoring. Built with NestJS and PostgreSQL for scalability and reliability.",
    highlights: [
      "AI Chat Service: Real-time chat interface using Gemini Pro for intelligent conversations",
      "Email Service: Contact form handling with AWS SES integration",
      "Blog Service: Medium blog post integration and management",
      "Health Checks: Comprehensive system health monitoring and status endpoints",
      "Super Admin Management: Secure user management with role-based access control",
      "CORS Configuration: Flexible cross-origin resource sharing setup",
      "Environment Management: Automated environment variable management scripts",
      "SSL Certificate Management: Automated SSL certificate handling for production",
      "Docker Deployment: Containerized deployment with Docker and Docker Compose",
      "API Documentation: Interactive API documentation with Swagger",
      "Monitoring & Logging: Real-time log monitoring and system observability",
      "Security: MIT licensed with comprehensive security policies and practices",
    ],
    stack: ["NestJS", "TypeScript", "PostgreSQL", "Node.js", "Docker", "AWS", "Swagger"],
    githubUrl: "https://github.com/notablenomads/nn-backend-api",
    liveUrl: "https://notablenomads.com/",
    visibility: "public",
    type: "personal",
    openSource: true,
    license: "MIT",
    year: "2025",
    role: "Creator & Maintainer",
    status: "active",
  },
  {
    title: "NestJS Drizzle Demo",
    description:
      "A demonstration project showcasing the integration of NestJS with Drizzle ORM for PostgreSQL. Implements a complete book management system with authors, books, and genres, demonstrating modern TypeScript ORM patterns and best practices.",
    highlights: [
      "Authors Management: Complete CRUD operations for authors with type-safe queries",
      "Books Management: CRUD operations for books with author relationships and foreign keys",
      "Genres Management: CRUD operations for genres and many-to-many book-genre relationships",
      "Type Safety: Full TypeScript support with Drizzle's type-safe query builder",
      "API Documentation: Comprehensive Swagger/OpenAPI documentation with interactive testing",
      "Database Migrations: Drizzle migrations for schema management and version control",
      "Environment Configuration: Flexible configuration through environment variables",
      "Modular Architecture: Clean separation of concerns with NestJS modules",
      "Data Transfer Objects: Proper DTOs for request/response validation",
      "Database Schema: Well-designed relational schema with proper relationships",
      "Testing Support: Built-in testing infrastructure and examples",
      "Modern ORM: Demonstrates Drizzle ORM as a modern alternative to TypeORM",
    ],
    stack: ["NestJS", "TypeScript", "PostgreSQL", "Drizzle ORM", "Swagger"],
    githubUrl: "https://github.com/MRdevX/nestjs-drizzle-demo",
    liveUrl: undefined,
    visibility: "public",
    type: "personal",
    openSource: true,
    license: "MIT",
    year: "2025",
    role: "Creator & Maintainer",
    status: "active",
  },
  {
    title: "Spotify Lyrics Translator",
    description:
      "A powerful desktop application that provides real-time translation of Spotify lyrics while you listen to music. Experience your favorite songs in any language with synchronized translations, beautiful interface, and seamless integration with Spotify.",
    highlights: [
      "Real-time Sync: Automatic detection and synchronization with currently playing Spotify tracks",
      "Multi-language Support: Translation support for 100+ languages with context-aware processing",
      "Cross-platform: Native applications for both macOS and Windows with system integration",
      "Modern UI: Beautiful native interface with light/dark mode support and system notifications",
      "Spotify Integration: Secure authentication and seamless connection with Spotify Premium accounts",
      "Smart Caching: Intelligent caching system for faster translations and improved performance",
      "Keyboard Shortcuts: Native keyboard shortcuts and window management for enhanced UX",
      "Automated Builds: GitHub Actions workflows for automated builds and releases",
      "Version Management: Automated version management and release process with semantic versioning",
      "Installation Packages: DMG installers for macOS and ZIP archives for Windows distribution",
      "Development Tools: Comprehensive build scripts and development environment setup",
      "Open Source: Forked from original project with significant improvements and enhancements",
    ],
    stack: ["Python", "Spotify API", "Translation APIs", "PyQt", "macOS", "Windows"],
    githubUrl: "https://github.com/MRdevX/spotify-lyrics-translator",
    liveUrl: undefined,
    visibility: "public",
    type: "personal",
    openSource: true,
    license: "MIT",
    year: "2025",
    role: "Fork Maintainer & Contributor",
    status: "active",
  },
  {
    title: "Nestifined MS Framework",
    description:
      "A refined and optimized codebase template for setting up NestJS microservices. Provides a streamlined, sophisticated, and well-structured foundation for beginning fresh microservice initiatives with comprehensive tooling and best practices.",
    highlights: [
      "Microservice Template: Complete boilerplate for NestJS microservice development with best practices",
      "Docker Integration: Containerized application setup with multi-stage builds and optimization",
      "Kubernetes Support: Deployment configurations for development, staging, and production environments",
      "Database Integration: TypeORM integration for database interactions with migration support",
      "Caching Layer: Redis integration for high-performance caching and session management",
      "Message Broker: RabbitMQ integration for asynchronous messaging and service communication",
      "API Documentation: Swagger/OpenAPI documentation with interactive testing interface",
      "Git Hooks: Husky integration for pre-commit linting, formatting, and commit message validation",
      "Code Quality: ESLint and Prettier configuration for consistent code style and quality",
      "Testing Framework: Comprehensive Jest setup for unit and e2e testing with coverage reporting",
      "Logging System: Winston logging with daily rotate file support and structured logging",
      "Environment Management: Flexible environment configuration with dotenv and validation",
    ],
    stack: ["NestJS", "TypeScript", "TypeORM", "Redis", "RabbitMQ", "Docker", "Kubernetes", "Swagger"],
    githubUrl: "https://github.com/MRdevX/nestifined-ms-framework",
    liveUrl: undefined,
    visibility: "public",
    type: "personal",
    openSource: true,
    license: "MIT",
    year: "2025",
    role: "Creator & Maintainer",
    status: "active",
  },
  {
    title: "Nestifined Auth MS",
    description:
      "An Authentication and Authorization microservice built on the Nestifined Framework. Provides comprehensive AuthN and AuthZ capabilities with JWT tokens, role-based access control, and secure user management for microservice architectures.",
    highlights: [
      "Authentication Service: Complete JWT-based authentication with token management and validation",
      "Authorization System: Role-based access control (RBAC) with granular permissions",
      "User Management: Comprehensive user registration, profile management, and account operations",
      "Security Features: Password hashing, session management, and secure token handling",
      "Microservice Architecture: Built on Nestifined Framework for seamless integration",
      "Database Integration: TypeORM-based user and permission storage with migration support",
      "Caching Layer: Redis integration for session caching and performance optimization",
      "API Documentation: Swagger/OpenAPI documentation for authentication endpoints",
      "Docker Support: Containerized deployment with multi-stage builds and optimization",
      "Kubernetes Ready: Deployment configurations for cloud-native environments",
      "Testing Framework: Comprehensive test suite for authentication and authorization flows",
      "Environment Configuration: Flexible configuration management for different deployment environments",
    ],
    stack: ["NestJS", "TypeScript", "TypeORM", "Redis", "JWT", "Docker", "Kubernetes", "Swagger"],
    githubUrl: "https://github.com/MRdevX/nestifined-auth-ms",
    liveUrl: undefined,
    visibility: "public",
    type: "personal",
    openSource: true,
    license: "MIT",
    year: "2025",
    role: "Creator & Maintainer",
    status: "active",
  },
  {
    title: "PostgreSQL Backup Restore Kit",
    description:
      "A comprehensive toolkit containing bash scripts for easy backup and restore of PostgreSQL databases. Automates database management operations with environment-specific configurations for development, staging, and production environments.",
    highlights: [
      "Automated Backup: Streamlined backup process for PostgreSQL databases with environment selection",
      "Multi-Environment Support: Separate configurations for DEV, STAG, and PROD environments",
      "Database Selection: Interactive database selection for targeted backup operations",
      "Restore Functionality: Complete database restoration with backup file selection and validation",
      "Environment Management: Environment-specific host, user, and database configurations",
      "Date-based Organization: Automatic backup organization with date-based directory structure",
      "Database Creation: Automatic database creation during restore operations if not exists",
      "Configuration Files: Separate configuration files for backup and restore operations",
      "Error Handling: Robust error handling and validation for database operations",
      "Cross-platform: Works on any Unix-like system with PostgreSQL and Bash support",
      "Open Source: MIT licensed with active community contributions and forks",
      "Documentation: Comprehensive README with setup instructions and usage examples",
    ],
    stack: ["Bash", "PostgreSQL", "Shell Scripting", "Database Management"],
    githubUrl: "https://github.com/MRdevX/pg-backup-restore-kit",
    liveUrl: undefined,
    visibility: "public",
    type: "personal",
    openSource: true,
    license: "MIT",
    year: "2025",
    role: "Creator & Maintainer",
    status: "active",
  },
  {
    title: "Kubernetes Rollout Automation",
    description:
      "Automate Kubernetes deployment restarts by category and environment, simplifying management across development, staging, and production environments. Ideal for maintaining application reliability and consistency with minimal effort.",
    highlights: [
      "Selective Restart: Choose deployments by category (Backend, Frontend, Tools) and environment (Development, Staging, Production)",
      "Efficient Management: Streamline operations by automating repetitive deployment restart tasks",
      "Customizable Configuration: Easily customize deployment lists to fit your Kubernetes environment",
      "Environment Support: Comprehensive support for Development, Staging, and Production environments",
      "Category-based Organization: Organize deployments into Backend, Frontend, and Tools categories",
      "Interactive Selection: User-friendly prompts for selecting categories, environments, and deployments",
      "Operational Efficiency: Reduce manual intervention and improve deployment reliability",
      "Cross-environment Consistency: Maintain consistency across different Kubernetes environments",
      "Shell Scripting: Lightweight bash script implementation for easy deployment and execution",
      "Documentation: Comprehensive README with usage examples and customization instructions",
      "Medium Article: Detailed guide on Medium explaining usage and benefits",
      "Open Source: MIT licensed with community contributions and feature requests",
    ],
    stack: ["Kubernetes", "Bash", "Shell Scripting", "DevOps"],
    githubUrl: "https://github.com/MRdevX/k8s-rollout-automation",
    liveUrl: undefined,
    visibility: "public",
    type: "personal",
    openSource: true,
    license: "MIT",
    year: "2025",
    role: "Creator & Maintainer",
    status: "active",
  },
  {
    title: "NestJS Microservice Kit",
    description:
      "A comprehensive boilerplate code template for quickly setting up NestJS microservices without dealing with extra configurations. Provides generic CRUD operations, database integration, testing, and production-ready features out of the box.",
    highlights: [
      "Generic CRUD: Complete generic CRUD Controller and Service implementations for rapid development",
      "Database Integration: PostgreSQL object data modeling using TypeORM with migration support",
      "Testing Framework: Comprehensive unit and integration tests using Jest with coverage reporting",
      "Error Handling: Centralized error handling mechanism for consistent error management",
      "API Documentation: Automatic Swagger/OpenAPI documentation generation",
      "Security Features: HTTP security headers using Helmet and CORS configuration",
      "Docker Support: Complete Docker and Docker Compose setup for containerized deployment",
      "Git Hooks: Husky and lint-staged integration for pre-commit code quality checks",
      "Code Quality: ESLint and Prettier configuration for consistent code formatting",
      "Editor Configuration: Consistent editor settings using EditorConfig",
      "Production Ready: Optimized for production deployment with proper configuration management",
      "Template Repository: GitHub template for easy project initialization and customization",
    ],
    stack: ["NestJS", "TypeScript", "TypeORM", "PostgreSQL", "Docker", "Jest", "Swagger"],
    githubUrl: "https://github.com/MRdevX/nestjs-microservice-kit",
    liveUrl: undefined,
    visibility: "public",
    type: "personal",
    openSource: true,
    license: "MIT",
    year: "2021",
    role: "Creator & Maintainer",
    status: "active",
  },
  {
    title: "License Lens",
    description:
      "A powerful tool for scanning and analyzing license information in projects. Automates license scanning across multiple repositories, identifies projects, checks dependency licenses, and generates clear summaries for compliance and transparency.",
    highlights: [
      "License Scanning: Automated scanning of project directories for license information across multiple ecosystems",
      "Multi-format Support: Generates detailed license reports in both text and JSON output formats",
      "Commercial Use Analysis: Categorizes licenses as safe for commercial use or requiring review",
      "Package Manager Support: Works with multiple package manager ecosystems (npm, yarn, pnpm, etc.)",
      "Command Line Interface: Easy-to-use CLI with comprehensive options and configuration",
      "Dependency Analysis: Deep scanning of project dependencies and their license information",
      "Exclusion Support: Configurable directory and license exclusions for targeted scanning",
      "Dev Dependencies: Optional inclusion of development dependencies in license analysis",
      "Depth Control: Configurable directory depth for scanning large project structures",
      "Error Handling: Robust error handling with fail-missing option for CI/CD integration",
      "Cross-platform: Supports Deno, Node.js, and Bun runtimes for maximum compatibility",
      "API Integration: Programmatic usage support for integration into other tools and workflows",
    ],
    stack: ["TypeScript", "Deno", "Node.js", "CLI", "License Analysis"],
    githubUrl: "https://github.com/MRdevX/license-lens",
    liveUrl: "https://jsr.io/@mrdevx/license-lens",
    visibility: "public",
    type: "personal",
    openSource: true,
    license: "MIT",
    year: "2025",
    role: "Creator & Maintainer",
    status: "active",
  },
  {
    title: "Rusty Repo Updater",
    description:
      "A lightweight, efficient Rust CLI utility for automatically updating multiple Git repositories in a single directory. Streamlines repository management with automatic discovery and multi-branch support for develop, main, and master branches.",
    highlights: [
      "Automatic Discovery: Scans specified directories for Git repositories without manual configuration",
      "Multi-Branch Support: Automatically fetches and pulls updates for develop, main, and master branches",
      "Simple CLI Interface: Easy-to-use command-line tool with minimal setup requirements",
      "Comprehensive Logging: Provides detailed output about repository update processes and status",
      "Lightweight Design: Efficient Rust implementation with minimal resource usage",
      "Cross-platform: Works on any platform with Rust and Git support",
      "Repository Management: Streamlines the process of keeping multiple projects up-to-date",
      "Error Handling: Robust error handling for various Git repository states and configurations",
      "Build System: Cargo-based build system for easy compilation and distribution",
      "Development Ready: Includes test suite and development setup instructions",
      "Future Roadmap: Planned features include parallel updates, custom branch support, and configuration files",
      "Open Source: MIT licensed with active development and community contributions",
    ],
    stack: ["Rust", "CLI", "Git", "Cargo"],
    githubUrl: "https://github.com/MRdevX/rusty-repo-updater",
    liveUrl: undefined,
    visibility: "public",
    type: "personal",
    openSource: true,
    license: "MIT",
    year: "2025",
    role: "Creator & Maintainer",
    status: "active",
  },
  {
    title: "Flight Operations Platform",
    description:
      "Real-time aviation operations management system with flight tracking, weather data integration, and pilot communication features. Implemented robust authentication and logging systems.",
    highlights: [
      "Integrated real-time weather data",
      "Built robust authentication system",
      "Enabled pilot communication features",
    ],
    stack: ["Node.js", "MongoDB", "Redis", "WebSocket", "Docker", "AWS"],
    githubUrl: undefined,
    liveUrl: undefined,
    visibility: "private",
    type: "client",
    openSource: false,
    year: "2021-2022",
    role: "Backend Engineer",
    status: "active",
    clientName: "Mehrpardaz Co",
  },
];
