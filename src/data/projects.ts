export type ProjectVisibility = "public" | "private";
export type ProjectType = "personal" | "client";

export interface Project {
  title: string;
  description: string;
  highlights?: string[];
  stack: string[];
  githubUrl?: string;
  liveUrl?: string;
  caseStudyUrl?: string;
  imageUrl?: string;
  logoUrl?: string;
  visibility: ProjectVisibility;
  openSource?: boolean;
  license?: string;
  year?: string;
  type: ProjectType;
  clientName?: string;
  clientLogoUrl?: string;
  role?: string;
  status?: "active" | "archived" | "in progress" | "maintenance";
}

export const projects: Project[] = [
  {
    title: "EV Fleet Management Platform Suite",
    description:
      "A comprehensive suite of tools for an EV SaaS provider, including fleet assessment, mobile employee assistant, and infrastructure orchestration. Delivered scalable microservices, real-time integrations, and IoT-ready backend for enterprise clients transitioning to e-mobility.",
    highlights: [
      "Led GCP to Azure migration, ensuring GDPR compliance and zero downtime across 3 major products",
      "Managed Azure Kubernetes Service (AKS) infrastructure supporting EV charging platform with high availability",
      "Architected monorepo solution using Lerna and NX, developing reusable generic libraries",
      "Upgraded core systems: NestJS major versions and PostgreSQL Flexible Server migration",
      "Migrated messaging infrastructure from Redis Pub/Sub to RabbitMQ for enhanced monitoring",
      "Optimized cloud infrastructure costs through resource monitoring and observability stack",
      "Deployed monitoring solutions including Grafana, Prometheus, and Redash via Helm Charts",
      "Enhanced CI/CD pipeline efficiency in GitLab, integrating automated testing with Jest",
      "Built eConsultant MVP from ground up for CO2 emissions and EV transition investment calculations",
      "Developed RESTful APIs using NestJS/TypeScript for consultation, installation, and charging services",
      "Optimized database performance through PostgreSQL query optimization for high-traffic endpoints",
      "Refactored billing service into modular components, enabling parallel development",
      "Mentored and onboarded backend developers, conducted technical interviews for team expansion",
      "Created comprehensive documentation for infrastructure architecture and incident management",
    ],
    stack: [
      "NestJS",
      "TypeScript",
      "PostgreSQL",
      "Redis",
      "RabbitMQ",
      "Docker",
      "Kubernetes",
      "Azure",
      "GitLab",
      "Lerna",
      "NX",
      "Grafana",
      "Prometheus",
      "Redash",
      "Helm",
      "Jest",
      "Postman",
    ],
    githubUrl: undefined,
    liveUrl: undefined,
    visibility: "private",
    type: "client",
    openSource: false,
    year: "2021â€“2025",
    role: "Senior Backend Engineer",
    status: "active",
    clientName: "Confidential (EV SaaS Provider)",
  },
  {
    title: "Personal Portfolio Website",
    description:
      "A cyberpunk-inspired personal website and portfolio showcasing my work as a Senior Backend Engineer & Cloud Architect. Built with Next.js 14, TypeScript, and Tailwind CSS, featuring an interactive terminal, real-time GitHub activity tracking, and blog integration.",
    highlights: [
      "Interactive Terminal: Custom-built terminal interface with command history and real-time execution",
      "GitHub Integration: Real-time repository display, contribution graph visualization, and activity feed",
      "Blog Integration: Medium blog integration with responsive article cards and image optimization",
      "Cyberpunk Design: Modern UI/UX with cyberpunk-inspired design elements",
      "Portfolio Showcase: Detailed project descriptions with technology stack highlights",
      "Professional Timeline: Experience timeline with work history and achievements",
      "SEO Optimized: Meta tags, sitemap generation, and search engine optimization",
      "Responsive Layout: Fully responsive design for all devices and screen sizes",
      "Dark Mode: Optimized dark mode experience with smooth transitions",
      "Performance: Fast page loads with Next.js 14 and optimized assets",
      "TypeScript: Full type safety throughout the application",
      "Deployment: Automated deployment with Vercel and CI/CD integration",
    ],
    stack: ["Next.js", "TypeScript", "Tailwind CSS", "Framer Motion", "React", "Node.js"],
    githubUrl: "https://github.com/MRdevX/mrashidi.me",
    liveUrl: "https://mrashidi.me",
    visibility: "public",
    type: "personal",
    openSource: true,
    license: "All Rights Reserved",
    year: "2024",
    role: "Creator & Maintainer",
    status: "active",
  },
  {
    title: "NestJS Queue Worker PoC",
    description:
      "A proof-of-concept demonstrating a scalable, fault-tolerant task processing system built with NestJS, PostgreSQL, and RabbitMQ. Showcases workflow orchestration, retry mechanisms, and horizontal scaling for distributed task processing.",
    highlights: [
      "Queue Manager: Handles task queuing, assignment, and monitoring",
      "Worker Nodes: Execute various task types with fault tolerance and optimized patterns",
      "Coordinator: Orchestrates workflows and manages task dependencies",
      "Database: PostgreSQL for persistent task state and workflow definitions",
      "Message Broker: RabbitMQ for reliable asynchronous task distribution",
      "Pattern Optimization: Uses EventPattern for all tasks with fire-and-forget semantics",
      "Horizontal Scaling: Supports multiple worker instances for load distribution",
      "Retry Mechanisms: Built-in fault tolerance with configurable retry policies",
      "Workflow Orchestration: Complex task dependencies and compensation patterns",
      "Docker Support: Containerized deployment with multi-stage builds",
      "Health Monitoring: Comprehensive health checks and status endpoints",
      "API Documentation: Complete REST API for task and queue management",
    ],
    stack: ["NestJS", "TypeScript", "PostgreSQL", "RabbitMQ", "Docker", "Node.js"],
    githubUrl: "https://github.com/MRdevX/nestjs-queue-worker-poc",
    liveUrl: undefined,
    visibility: "public",
    type: "personal",
    openSource: true,
    license: undefined,
    year: "2025",
    role: "Creator & Maintainer",
    status: "active",
  },
  {
    title: "Notable Nomads Backend API",
    description:
      "Backend API service for the Notable Nomads platform featuring AI chat integration, email services, blog management, and comprehensive health monitoring. Built with NestJS and PostgreSQL for scalability and reliability.",
    highlights: [
      "AI Chat Service: Real-time chat interface using Gemini Pro for intelligent conversations",
      "Email Service: Contact form handling with AWS SES integration",
      "Blog Service: Medium blog post integration and management",
      "Health Checks: Comprehensive system health monitoring and status endpoints",
      "Super Admin Management: Secure user management with role-based access control",
      "CORS Configuration: Flexible cross-origin resource sharing setup",
      "Environment Management: Automated environment variable management scripts",
      "SSL Certificate Management: Automated SSL certificate handling for production",
      "Docker Deployment: Containerized deployment with Docker and Docker Compose",
      "API Documentation: Interactive API documentation with Swagger",
      "Monitoring & Logging: Real-time log monitoring and system observability",
      "Security: MIT licensed with comprehensive security policies and practices",
    ],
    stack: ["NestJS", "TypeScript", "PostgreSQL", "Node.js", "Docker", "AWS", "Swagger"],
    githubUrl: "https://github.com/notablenomads/nn-backend-api",
    liveUrl: "https://notablenomads.com/",
    visibility: "public",
    type: "personal",
    openSource: true,
    license: "MIT",
    year: "2025",
    role: "Creator & Maintainer",
    status: "active",
  },
  {
    title: "NestJS Drizzle Demo",
    description:
      "A demonstration project showcasing the integration of NestJS with Drizzle ORM for PostgreSQL. Implements a complete book management system with authors, books, and genres, demonstrating modern TypeScript ORM patterns and best practices.",
    highlights: [
      "Authors Management: Complete CRUD operations for authors with type-safe queries",
      "Books Management: CRUD operations for books with author relationships and foreign keys",
      "Genres Management: CRUD operations for genres and many-to-many book-genre relationships",
      "Type Safety: Full TypeScript support with Drizzle's type-safe query builder",
      "API Documentation: Comprehensive Swagger/OpenAPI documentation with interactive testing",
      "Database Migrations: Drizzle migrations for schema management and version control",
      "Environment Configuration: Flexible configuration through environment variables",
      "Modular Architecture: Clean separation of concerns with NestJS modules",
      "Data Transfer Objects: Proper DTOs for request/response validation",
      "Database Schema: Well-designed relational schema with proper relationships",
      "Testing Support: Built-in testing infrastructure and examples",
      "Modern ORM: Demonstrates Drizzle ORM as a modern alternative to TypeORM",
    ],
    stack: ["NestJS", "TypeScript", "PostgreSQL", "Drizzle", "Swagger"],
    githubUrl: "https://github.com/MRdevX/nestjs-drizzle-demo",
    liveUrl: undefined,
    visibility: "public",
    type: "personal",
    openSource: true,
    license: "MIT",
    year: "2025",
    role: "Creator & Maintainer",
    status: "active",
  },
  {
    title: "Spotify Lyrics Translator",
    description:
      "A desktop application that provides real-time translation of Spotify lyrics while you listen to music. Experience your favorite songs in any language with synchronized translations and seamless integration with Spotify.",
    highlights: [
      "Real-time Sync: Automatic detection and synchronization with currently playing Spotify tracks",
      "Multi-language Support: Translation support for multiple languages",
      "Cross-platform: Native applications for macOS and Windows",
      "Spotify Integration: Authentication and connection with Spotify Premium accounts",
      "Desktop Application: Native interface for desktop platforms",
      "Open Source: Forked from original project with improvements",
    ],
    stack: ["Python", "Spotify API", "Translation APIs", "PyQt", "macOS", "Windows"],
    githubUrl: "https://github.com/MRdevX/spotify-lyrics-translator",
    liveUrl: undefined,
    visibility: "public",
    type: "personal",
    openSource: true,
    license: "MIT",
    year: "2025",
    role: "Fork Maintainer & Contributor",
    status: "active",
  },
  {
    title: "Nestifined MS Framework",
    description:
      "A refined and optimized codebase template for setting up NestJS microservices. Provides a streamlined foundation for beginning fresh microservice initiatives with comprehensive tooling and best practices.",
    highlights: [
      "Microservice Template: Complete boilerplate for NestJS microservice development",
      "Docker Integration: Containerized application setup with multi-stage builds",
      "Database Integration: TypeORM integration for database interactions",
      "Caching Layer: Redis integration for high-performance caching",
      "Message Broker: RabbitMQ integration for asynchronous messaging",
      "API Documentation: Swagger/OpenAPI documentation",
      "Testing Framework: Jest setup for unit and e2e testing",
      "Code Quality: ESLint and Prettier configuration",
    ],
    stack: ["NestJS", "TypeScript", "TypeORM", "Redis", "RabbitMQ", "Docker", "Kubernetes", "Swagger"],
    githubUrl: "https://github.com/MRdevX/nestifined-ms-framework",
    liveUrl: undefined,
    visibility: "public",
    type: "personal",
    openSource: true,
    license: "MIT",
    year: "2024",
    role: "Creator & Maintainer",
    status: "active",
  },
  {
    title: "Nestifined Auth MS",
    description:
      "An Authentication and Authorization microservice built on the Nestifined Framework. Provides AuthN and AuthZ capabilities with JWT tokens, role-based access control, and secure user management for microservice architectures.",
    highlights: [
      "Authentication Service: JWT-based authentication with token management and validation",
      "Authorization System: Role-based access control (RBAC) with permissions",
      "User Management: User registration, profile management, and account operations",
      "Security Features: Password hashing, session management, and secure token handling",
      "Microservice Architecture: Built on Nestifined Framework for integration",
      "Database Integration: TypeORM-based user and permission storage",
      "Caching Layer: Redis integration for session caching",
      "API Documentation: Swagger/OpenAPI documentation for authentication endpoints",
      "Docker Support: Containerized deployment with multi-stage builds",
      "Testing Framework: Test suite for authentication and authorization flows",
    ],
    stack: ["NestJS", "TypeScript", "TypeORM", "Redis", "JWT", "Docker", "Kubernetes", "Swagger"],
    githubUrl: "https://github.com/MRdevX/nestifined-auth-ms",
    liveUrl: undefined,
    visibility: "public",
    type: "personal",
    openSource: true,
    license: "MIT",
    year: "2024",
    role: "Creator & Maintainer",
    status: "active",
  },
  {
    title: "PostgreSQL Backup Restore Kit",
    description:
      "A toolkit containing bash scripts for easy backup and restore of PostgreSQL databases. Automates database management operations with environment-specific configurations for development, staging, and production environments.",
    highlights: [
      "Automated Backup: Streamlined backup process for PostgreSQL databases with environment selection",
      "Multi-Environment Support: Separate configurations for DEV, STAG, and PROD environments",
      "Database Selection: Interactive database selection for targeted backup operations",
      "Restore Functionality: Database restoration with backup file selection and validation",
      "Environment Management: Environment-specific host, user, and database configurations",
      "Date-based Organization: Automatic backup organization with date-based directory structure",
      "Database Creation: Automatic database creation during restore operations if not exists",
      "Configuration Files: Separate configuration files for backup and restore operations",
      "Error Handling: Error handling and validation for database operations",
      "Cross-platform: Works on Unix-like systems with PostgreSQL and Bash support",
    ],
    stack: ["Bash", "PostgreSQL", "Shell Scripting", "Database Management"],
    githubUrl: "https://github.com/MRdevX/pg-backup-restore-kit",
    liveUrl: undefined,
    visibility: "public",
    type: "personal",
    openSource: true,
    license: "MIT",
    year: "2024",
    role: "Creator & Maintainer",
    status: "active",
  },
  {
    title: "Kubernetes Rollout Automation",
    description:
      "Automate Kubernetes deployment restarts by category and environment, simplifying management across development, staging, and production environments. Ideal for maintaining application reliability and consistency with minimal effort.",
    highlights: [
      "Selective Restart: Choose deployments by category (Backend, Frontend, Tools) and environment (Development, Staging, Production)",
      "Efficient Management: Streamline operations by automating repetitive deployment restart tasks",
      "Customizable Configuration: Easily customize deployment lists to fit your Kubernetes environment",
      "Environment Support: Support for Development, Staging, and Production environments",
      "Category-based Organization: Organize deployments into Backend, Frontend, and Tools categories",
      "Interactive Selection: User-friendly prompts for selecting categories, environments, and deployments",
      "Operational Efficiency: Reduce manual intervention and improve deployment reliability",
      "Shell Scripting: Lightweight bash script implementation for easy deployment and execution",
      "Documentation: README with usage examples and customization instructions",
    ],
    stack: ["Kubernetes", "Bash", "Shell Scripting", "DevOps"],
    githubUrl: "https://github.com/MRdevX/k8s-rollout-automation",
    liveUrl: undefined,
    visibility: "public",
    type: "personal",
    openSource: true,
    license: "MIT",
    year: "2024",
    role: "Creator & Maintainer",
    status: "active",
  },
  {
    title: "NestJS Microservice Kit",
    description:
      "A boilerplate code template for quickly setting up NestJS microservices without dealing with extra configurations. Provides generic CRUD operations, database integration, testing, and production-ready features out of the box.",
    highlights: [
      "Generic CRUD: Generic CRUD Controller and Service implementations for rapid development",
      "Database Integration: PostgreSQL object data modeling using TypeORM with migration support",
      "Testing Framework: Unit and integration tests using Jest with coverage reporting",
      "Error Handling: Centralized error handling mechanism for consistent error management",
      "API Documentation: Automatic Swagger/OpenAPI documentation generation",
      "Security Features: HTTP security headers using Helmet and CORS configuration",
      "Docker Support: Docker and Docker Compose setup for containerized deployment",
      "Git Hooks: Husky and lint-staged integration for pre-commit code quality checks",
      "Code Quality: ESLint and Prettier configuration for consistent code formatting",
      "Editor Configuration: Consistent editor settings using EditorConfig",
      "Production Ready: Optimized for production deployment with proper configuration management",
      "Template Repository: GitHub template for easy project initialization and customization",
    ],
    stack: ["NestJS", "TypeScript", "TypeORM", "PostgreSQL", "Docker", "Jest", "Swagger"],
    githubUrl: "https://github.com/MRdevX/nestjs-microservice-kit",
    liveUrl: undefined,
    visibility: "public",
    type: "personal",
    openSource: true,
    license: "MIT",
    year: "2021",
    role: "Creator & Maintainer",
    status: "active",
  },
  {
    title: "License Lens",
    description:
      "A tool for scanning and analyzing license information in projects. Automates license scanning across multiple repositories, identifies projects, checks dependency licenses, and generates clear summaries for compliance and transparency.",
    highlights: [
      "License Scanning: Automated scanning of project directories for license information across multiple ecosystems",
      "Multi-format Support: Generates detailed license reports in both text and JSON output formats",
      "Commercial Use Analysis: Categorizes licenses as safe for commercial use or requiring review",
      "Package Manager Support: Works with multiple package manager ecosystems (npm, yarn, pnpm, etc.)",
      "Command Line Interface: Easy-to-use CLI with comprehensive options and configuration",
      "Dependency Analysis: Scanning of project dependencies and their license information",
      "Exclusion Support: Configurable directory and license exclusions for targeted scanning",
      "Dev Dependencies: Optional inclusion of development dependencies in license analysis",
      "Depth Control: Configurable directory depth for scanning large project structures",
      "Error Handling: Error handling with fail-missing option for CI/CD integration",
      "Cross-platform: Supports Deno, Node.js, and Bun runtimes for maximum compatibility",
    ],
    stack: ["TypeScript", "Deno", "Node.js", "CLI", "License Analysis"],
    githubUrl: "https://github.com/MRdevX/license-lens",
    liveUrl: "https://jsr.io/@mrdevx/license-lens",
    visibility: "public",
    type: "personal",
    openSource: true,
    license: "MIT",
    year: "2024",
    role: "Creator & Maintainer",
    status: "active",
  },
  {
    title: "Rusty Repo Updater",
    description:
      "A lightweight, efficient Rust CLI utility for automatically updating multiple Git repositories in a single directory. Streamlines repository management with automatic discovery and multi-branch support for develop, main, and master branches.",
    highlights: [
      "Automatic Discovery: Scans specified directories for Git repositories without manual configuration",
      "Multi-Branch Support: Automatically fetches and pulls updates for develop, main, and master branches",
      "Simple CLI Interface: Easy-to-use command-line tool with minimal setup requirements",
      "Comprehensive Logging: Provides detailed output about repository update processes and status",
      "Lightweight Design: Efficient Rust implementation with minimal resource usage",
      "Cross-platform: Works on any platform with Rust and Git support",
      "Repository Management: Streamlines the process of keeping multiple projects up-to-date",
      "Error Handling: Error handling for various Git repository states and configurations",
      "Build System: Cargo-based build system for easy compilation and distribution",
      "Development Ready: Includes test suite and development setup instructions",
    ],
    stack: ["Rust", "CLI", "Git", "Cargo"],
    githubUrl: "https://github.com/MRdevX/rusty-repo-updater",
    liveUrl: undefined,
    visibility: "public",
    type: "personal",
    openSource: true,
    license: "MIT",
    year: "2024",
    role: "Creator & Maintainer",
    status: "active",
  },
  {
    title: "Flight Operations Platform",
    description:
      "Complete aviation operations and crew management system built from scratch using Express.js and JavaScript. Served React dashboard and iPadOS application for flight crew operations with real-time weather data integration and offline synchronization capabilities.",
    highlights: [
      "Built complete backend architecture from scratch using Express.js and JavaScript for aviation operations",
      "Designed and implemented RESTful APIs serving React dashboard and iPadOS application for flight crew",
      "Integrated meteorological APIs to deliver real-time weather forecast data for specific flight routes",
      "Developed features for weight/balance calculations, crew scheduling, and flight document processing",
      "Architected offline synchronization system enabling flight crews to access critical data without connectivity",
      "Onboarded and mentored 2 junior developers, establishing development guidelines and documentation standards",
      "Designed MongoDB schema optimized for aviation data including crew schedules, flight plans, and operational documents",
      "Implemented data validation and error handling mechanisms to ensure aviation safety compliance",
      "Collaborated with frontend teams to establish API contracts and ensure seamless platform integration",
      "Created comprehensive technical documentation covering backend services, APIs, and system architecture",
    ],
    stack: ["Express", "JavaScript", "MongoDB", "RESTful APIs", "iPadOS", "React", "Weather APIs"],
    githubUrl: undefined,
    liveUrl: undefined,
    visibility: "private",
    type: "client",
    openSource: false,
    year: "2020-2021",
    role: "Senior Backend Engineer",
    status: "active",
    clientName: "Mehrpardaz Co",
  },
  {
    title: "NomadBoard Chrome Extension",
    description:
      "A Chrome extension to help job seekers track their job applications with Google Sheets integration. Automatically captures job data, tracks application status, and integrates with Google Sheets for easy job search management.",
    highlights: [
      "Google Account Integration: OAuth integration with Google Cloud Console for authentication",
      "Job Data Tracking: Store and manage key job details from job posting pages",
      "Status Tracking: Track application status with custom status categories",
      "Google Sheets Integration: Integration with Google Sheets API for data storage",
      "Recent Jobs History: Access to recently viewed and applied job postings",
      "Security Implementation: OAuth consent screen configuration and credential management",
      "Extension Key Management: Extension key extraction and PEM file handling",
      "Development Setup: Chrome extension loading and development workflow",
    ],
    stack: ["JavaScript", "TypeScript", "Chrome Extension API", "Google Sheets API", "OAuth", "CSS", "HTML"],
    githubUrl: "https://github.com/notablenomads/nomadboard-extension",
    liveUrl: undefined,
    visibility: "public",
    type: "personal",
    openSource: true,
    license: "MIT",
    year: "2025",
    role: "Creator & Maintainer",
    status: "active",
  },
];
